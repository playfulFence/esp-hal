(function() {var type_impls = {
"esp_hal":[["<section id=\"impl-ConstParamTy-for-%5BT;+N%5D\" class=\"impl\"><a href=\"#impl-ConstParamTy-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; ConstParamTy for [T; N]<div class=\"where\">where\n    T: ConstParamTy,</div></h3></section>","ConstParamTy","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialOrd-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; PartialOrd for [T; N]<div class=\"where\">where\n    T: PartialOrd,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;[T; N]) -&gt; Option&lt;Ordering&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt</a>(&amp;self, other: &amp;[T; N]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le</a>(&amp;self, other: &amp;[T; N]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge</a>(&amp;self, other: &amp;[T; N]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt</a>(&amp;self, other: &amp;[T; N]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a>Read more</a></div></details></div></details>","PartialOrd","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; BorrowMut&lt;[T]&gt; for [T; N]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut [T]</h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a>Read more</a></div></details></div></details>","BorrowMut<[T]>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#impl-Index%3CI%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, const N: usize&gt; Index&lt;I&gt; for [T; N]<div class=\"where\">where\n    [T]: Index&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = &lt;[T] as Index&lt;I&gt;&gt;::Output</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;[T; N] as Index&lt;I&gt;&gt;::Output</h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a>Read more</a></div></details></div></details>","Index<I>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Debug-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; Debug for [T; N]<div class=\"where\">where\n    T: Debug,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.58.0\">1.58.0</span><a href=\"#impl-Clone-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; Clone for [T; N]<div class=\"where\">where\n    T: Clone,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; [T; N]</h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;[T; N])</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","esp_hal::twai::filter::BitFilter"],["<section id=\"impl-StructuralEq-for-%5BT;+N%5D\" class=\"impl\"><a href=\"#impl-StructuralEq-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; StructuralEq for [T; N]</h3></section>","StructuralEq","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; AsMut&lt;[T]&gt; for [T; N]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut [T]</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[T]>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; Borrow&lt;[T]&gt; for [T; N]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;[T]</h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a>Read more</a></div></details></div></details>","Borrow<[T]>","esp_hal::twai::filter::BitFilter"],["<section id=\"impl-Eq-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Eq-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; Eq for [T; N]<div class=\"where\">where\n    T: Eq,</div></h3></section>","Eq","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#impl-IndexMut%3CI%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, const N: usize&gt; IndexMut&lt;I&gt; for [T; N]<div class=\"where\">where\n    [T]: IndexMut&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;[T; N] as Index&lt;I&gt;&gt;::Output</h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a>Read more</a></div></details></div></details>","IndexMut<I>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Ord-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; Ord for [T; N]<div class=\"where\">where\n    T: Ord,</div></h3></section></summary><div class=\"docblock\"><p>Implements comparison of arrays <a href=\"Ord#lexicographical-comparison\">lexicographically</a>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cmp</a>(&amp;self, other: &amp;[T; N]) -&gt; Ordering</h4></section></summary><div class='docblock'>This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized + PartialOrd,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a>Read more</a></div></details></div></details>","Ord","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26mut+%5BB%5D%3E-for-%5BA;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialEq%3C%26mut+%5BB%5D%3E-for-%5BA;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N: usize&gt; PartialEq&lt;&amp;mut [B]&gt; for [A; N]<div class=\"where\">where\n    A: PartialEq&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut [B]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut [B]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&mut [B]>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB;+N%5D%3E-for-%5BA;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialEq%3C%5BB;+N%5D%3E-for-%5BA;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N: usize&gt; PartialEq&lt;[B; N]&gt; for [A; N]<div class=\"where\">where\n    A: PartialEq&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;[B; N]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;[B; N]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B; N]>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5BB%5D%3E-for-%5BA;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialEq%3C%26%5BB%5D%3E-for-%5BA;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N: usize&gt; PartialEq&lt;&amp;[B]&gt; for [A; N]<div class=\"where\">where\n    A: PartialEq&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;[B]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;[B]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[B]>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BB%5D%3E-for-%5BA;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-PartialEq%3C%5BB%5D%3E-for-%5BA;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, const N: usize&gt; PartialEq&lt;[B]&gt; for [A; N]<div class=\"where\">where\n    A: PartialEq&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;[B]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;[B]) -&gt; bool</h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[B]>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.53.0\">1.53.0</span><a href=\"#impl-IntoIterator-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; IntoIterator for [T; N]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_iter</a>(self) -&gt; &lt;[T; N] as IntoIterator&gt;::IntoIter</h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe array (from start to end). The array cannot be used after calling\nthis unless <code>T</code> implements <code>Copy</code>, so the whole array is copied.</p>\n<p>Arrays have special behavior when calling <code>.into_iter()</code> prior to the\n2021 edition – see the <a href=\"prim@array\">array</a> Editions section for more information.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">IntoIter</a> = IntoIter&lt;T, N&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; AsRef&lt;[T]&gt; for [T; N]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[T]</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[T]>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SlicePattern-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.51.0\">1.51.0</span><a href=\"#impl-SlicePattern-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; SlicePattern for [T; N]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_pattern</code>)</span></div></span><div class='docblock'>The element type of the slice being matched on.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method trait-impl\"><a href=\"#method.as_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[&lt;[T; N] as SlicePattern&gt;::Item]</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_pattern</code>)</span></div></span><div class='docblock'>Currently, the consumers of <code>SlicePattern</code> need a slice.</div></details></div></details>","SlicePattern","esp_hal::twai::filter::BitFilter"],["<section id=\"impl-StructuralPartialEq-for-%5BT;+N%5D\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; StructuralPartialEq for [T; N]</h3></section>","StructuralPartialEq","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T, T, T, T, T, T, T)&gt; for [T; 9]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T, T, T, T, T, T, T)) -&gt; [T; 9]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T, T, T, T, T, T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T)%3E-for-%5BT;+2%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T)%3E-for-%5BT;+2%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T)&gt; for [T; 2]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T)) -&gt; [T; 2]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T, T)&gt; for [T; 4]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T, T)) -&gt; [T; 4]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T, T, T, T, T, T)&gt; for [T; 8]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T, T, T, T, T, T)) -&gt; [T; 8]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T, T, T, T, T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T)&gt; for [T; 3]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T)) -&gt; [T; 3]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T, T, T, T)&gt; for [T; 6]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T, T, T, T)) -&gt; [T; 6]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T, T, T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T, T, T, T, T, T, T, T, T, T)&gt; for [T; 12]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T, T, T, T, T, T, T, T, T, T)) -&gt; [T; 12]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T, T, T, T, T, T, T, T, T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T, T, T, T, T, T, T, T)&gt; for [T; 10]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T, T, T, T, T, T, T, T)) -&gt; [T; 10]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T, T, T, T, T, T, T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D\" class=\"impl\"><a href=\"#impl-From%3CSimd%3CT,+N%3E%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; From&lt;Simd&lt;T, N&gt;&gt; for [T; N]<div class=\"where\">where\n    LaneCount&lt;N&gt;: SupportedLaneCount,\n    T: SimdElement,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(vector: Simd&lt;T, N&gt;) -&gt; [T; N]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Simd<T, N>>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,)%3E-for-%5BT;+1%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,)%3E-for-%5BT;+1%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T,)&gt; for [T; 1]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T,)) -&gt; [T; 1]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T,)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T, T, T)&gt; for [T; 5]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T, T, T)) -&gt; [T; 5]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T, T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T, T, T, T, T, T, T, T, T)&gt; for [T; 11]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T, T, T, T, T, T, T, T, T)) -&gt; [T; 11]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T, T, T, T, T, T, T, T, T)>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.71.0\">1.71.0</span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; From&lt;(T, T, T, T, T, T, T)&gt; for [T; 7]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(tuple: (T, T, T, T, T, T, T)) -&gt; [T; 7]</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<(T, T, T, T, T, T, T)>","esp_hal::twai::filter::BitFilter"],["<section id=\"impl-Copy-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.58.0\">1.58.0</span><a href=\"#impl-Copy-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; Copy for [T; N]<div class=\"where\">where\n    T: Copy,</div></h3></section>","Copy","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#impl-Hash-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; Hash for [T; N]<div class=\"where\">where\n    T: Hash,</div></h3></section></summary><div class=\"docblock\"><p>The hash of an array is the same as that of the corresponding slice,\nas required by the <code>Borrow</code> implementation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>a: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(a), b.hash_one(s));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: &amp;mut H)<div class=\"where\">where\n    H: Hasher,</div></h4></section></summary><div class='docblock'>Feeds this value into the given [<code>Hasher</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: Hasher,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given [<code>Hasher</code>]. <a>Read more</a></div></details></div></details>","Hash","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2359%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2359%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 2]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 2]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2353%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2353%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 8]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 8]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2333%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2333%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 28]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 28]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2351%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2351%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 10]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 10]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2361%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2361%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 0]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 0]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2342%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2342%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 19]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 19]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2341%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2341%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 20]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 20]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2335%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2335%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 26]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 26]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2343%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2343%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 18]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 18]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2334%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2334%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 27]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 27]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2347%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2347%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 14]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 14]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2337%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2337%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 24]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 24]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2352%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2352%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 9]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 9]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+32%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+32%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 32]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 32]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2340%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2340%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 21]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 21]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2350%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2350%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 11]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 11]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2338%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2338%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 23]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 23]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2331%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2331%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 30]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 30]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2354%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2354%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 7]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 7]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2332%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2332%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 29]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 29]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2348%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2348%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 13]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 13]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2330%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2330%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 31]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 31]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2345%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2345%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 16]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 16]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2344%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2344%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 17]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 17]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2349%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2349%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 12]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 12]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2360%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2360%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 1]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 1]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2339%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2339%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 22]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 22]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2336%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2336%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 25]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 25]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2346%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2346%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 15]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 15]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2357%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2357%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 4]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 4]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2356%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2356%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 5]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 5]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2355%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2355%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 6]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 6]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-%5BT;+core::::array::%7Bimpl%2358%7D::%7Bconstant%230%7D%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.4.0\">1.4.0</span><a href=\"#impl-Default-for-%5BT;+core::::array::%7Bimpl%2358%7D::%7Bconstant%230%7D%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Default for [T; 3]<div class=\"where\">where\n    T: Default,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default</a>() -&gt; [T; 3]</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a>Read more</a></div></details></div></details>","Default","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.34.0\">1.34.0</span><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; TryFrom&lt;&amp;[T]&gt; for [T; N]<div class=\"where\">where\n    T: Copy,</div></h3></section></summary><div class=\"docblock\"><p>Tries to create an array <code>[T; N]</code> by copying from a slice <code>&amp;[T]</code>. Succeeds if\n<code>slice.len() == N</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>bytes_head: [u8; <span class=\"number\">2</span>] = &lt;[u8; <span class=\"number\">2</span>]&gt;::try_from(<span class=\"kw-2\">&amp;</span>bytes[<span class=\"number\">0</span>..<span class=\"number\">2</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, u16::from_le_bytes(bytes_head));\n\n<span class=\"kw\">let </span>bytes_tail: [u8; <span class=\"number\">2</span>] = bytes[<span class=\"number\">1</span>..<span class=\"number\">3</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">512</span>, u16::from_le_bytes(bytes_tail));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = TryFromSliceError</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_from</a>(slice: &amp;[T]) -&gt; Result&lt;[T; N], TryFromSliceError&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&[T]>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.59.0\">1.59.0</span><a href=\"#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; TryFrom&lt;&amp;mut [T]&gt; for [T; N]<div class=\"where\">where\n    T: Copy,</div></h3></section></summary><div class=\"docblock\"><p>Tries to create an array <code>[T; N]</code> by copying from a mutable slice <code>&amp;mut [T]</code>.\nSucceeds if <code>slice.len() == N</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes: [u8; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>bytes_head: [u8; <span class=\"number\">2</span>] = &lt;[u8; <span class=\"number\">2</span>]&gt;::try_from(<span class=\"kw-2\">&amp;mut </span>bytes[<span class=\"number\">0</span>..<span class=\"number\">2</span>]).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, u16::from_le_bytes(bytes_head));\n\n<span class=\"kw\">let </span>bytes_tail: [u8; <span class=\"number\">2</span>] = (<span class=\"kw-2\">&amp;mut </span>bytes[<span class=\"number\">1</span>..<span class=\"number\">3</span>]).try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">512</span>, u16::from_le_bytes(bytes_tail));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = TryFromSliceError</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_from</a>(slice: &amp;mut [T]) -&gt; Result&lt;[T; N], TryFromSliceError&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&mut [T]>","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteTarget-for-%5BT;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/embedded_dma/lib.rs.html#191\">source</a><a href=\"#impl-WriteTarget-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; <a class=\"trait\" href=\"esp_hal/prelude/trait._embedded_dma_WriteTarget.html\" title=\"trait esp_hal::prelude::_embedded_dma_WriteTarget\">WriteTarget</a> for [T; N]<div class=\"where\">where\n    T: <a class=\"trait\" href=\"esp_hal/prelude/trait._embedded_dma_WriteTarget.html\" title=\"trait esp_hal::prelude::_embedded_dma_WriteTarget\">WriteTarget</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Word\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Word\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"esp_hal/prelude/trait._embedded_dma_WriteTarget.html#associatedtype.Word\" class=\"associatedtype\">Word</a> = &lt;T as <a class=\"trait\" href=\"esp_hal/prelude/trait._embedded_dma_WriteTarget.html\" title=\"trait esp_hal::prelude::_embedded_dma_WriteTarget\">WriteTarget</a>&gt;::<a class=\"associatedtype\" href=\"esp_hal/prelude/trait._embedded_dma_WriteTarget.html#associatedtype.Word\" title=\"type esp_hal::prelude::_embedded_dma_WriteTarget::Word\">Word</a></h4></section><section id=\"method.as_write_buffer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embedded_dma/lib.rs.html#164\">source</a><a href=\"#method.as_write_buffer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"esp_hal/prelude/trait._embedded_dma_WriteTarget.html#method.as_write_buffer\" class=\"fn\">as_write_buffer</a>(&amp;mut self) -&gt; (*mut Self::<a class=\"associatedtype\" href=\"esp_hal/prelude/trait._embedded_dma_WriteTarget.html#associatedtype.Word\" title=\"type esp_hal::prelude::_embedded_dma_WriteTarget::Word\">Word</a>, usize)</h4></section></div></details>","WriteTarget","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ReadTarget-for-%5BT;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/embedded_dma/lib.rs.html#187\">source</a><a href=\"#impl-ReadTarget-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; <a class=\"trait\" href=\"esp_hal/prelude/trait._embedded_dma_ReadTarget.html\" title=\"trait esp_hal::prelude::_embedded_dma_ReadTarget\">ReadTarget</a> for [T; N]<div class=\"where\">where\n    T: <a class=\"trait\" href=\"esp_hal/prelude/trait._embedded_dma_ReadTarget.html\" title=\"trait esp_hal::prelude::_embedded_dma_ReadTarget\">ReadTarget</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Word\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Word\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"esp_hal/prelude/trait._embedded_dma_ReadTarget.html#associatedtype.Word\" class=\"associatedtype\">Word</a> = &lt;T as <a class=\"trait\" href=\"esp_hal/prelude/trait._embedded_dma_ReadTarget.html\" title=\"trait esp_hal::prelude::_embedded_dma_ReadTarget\">ReadTarget</a>&gt;::<a class=\"associatedtype\" href=\"esp_hal/prelude/trait._embedded_dma_ReadTarget.html#associatedtype.Word\" title=\"type esp_hal::prelude::_embedded_dma_ReadTarget::Word\">Word</a></h4></section><section id=\"method.as_read_buffer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embedded_dma/lib.rs.html#145\">source</a><a href=\"#method.as_read_buffer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"esp_hal/prelude/trait._embedded_dma_ReadTarget.html#method.as_read_buffer\" class=\"fn\">as_read_buffer</a>(&amp;self) -&gt; (*const Self::<a class=\"associatedtype\" href=\"esp_hal/prelude/trait._embedded_dma_ReadTarget.html#associatedtype.Word\" title=\"type esp_hal::prelude::_embedded_dma_ReadTarget::Word\">Word</a>, usize)</h4></section></div></details>","ReadTarget","esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-%5Bu8;+N%5D\" class=\"impl\"><a href=\"#impl-%5Bu8;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: usize&gt; [u8; N]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ascii\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_ascii</a>(&amp;self) -&gt; Option&lt;&amp;[AsciiChar; N]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts this array of bytes into a array of ASCII characters,\nor returns <code>None</code> if any of the characters is non-ASCII.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ascii_char)]\n#![feature(const_option)]\n\n</span><span class=\"kw\">const </span>HEX_DIGITS: [std::ascii::Char; <span class=\"number\">16</span>] =\n    <span class=\"kw-2\">*</span><span class=\"string\">b\"0123456789abcdef\"</span>.as_ascii().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(HEX_DIGITS[<span class=\"number\">1</span>].as_str(), <span class=\"string\">\"1\"</span>);\n<span class=\"macro\">assert_eq!</span>(HEX_DIGITS[<span class=\"number\">10</span>].as_str(), <span class=\"string\">\"a\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ascii_unchecked\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">as_ascii_unchecked</a>(&amp;self) -&gt; &amp;[AsciiChar; N]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>)</span></div></span></summary><div class=\"docblock\"><p>Converts this array of bytes into a array of ASCII characters,\nwithout checking whether they’re valid.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>Every byte in the array must be in <code>0..=127</code>, or else this is UB.</p>\n</div></details></div></details>",0,"esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-%5BT;+N%5D\" class=\"impl\"><a href=\"#impl-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: usize&gt; [T; N]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.55.0\">1.55.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">map</a>&lt;F, U&gt;(self, f: F) -&gt; [U; N]<div class=\"where\">where\n    F: FnMut(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns an array of the same size as <code>self</code>, with function <code>f</code> applied to each element\nin order.</p>\n<p>If you don’t necessarily need a new fixed-size array, consider using\n[<code>Iterator::map</code>] instead.</p>\n<h5 id=\"note-on-performance-and-stack-usage\"><a href=\"#note-on-performance-and-stack-usage\">Note on performance and stack usage</a></h5>\n<p>Unfortunately, usages of this method are currently not always optimized\nas well as they could be. This mainly concerns large arrays, as mapping\nover small arrays seem to be optimized just fine. Also note that in\ndebug mode (i.e. without any optimizations), this method can use a lot\nof stack space (a few times the size of the array or more).</p>\n<p>Therefore, in performance-critical code, try to avoid using this method\non large arrays or check the emitted code. Also try to avoid chained\nmaps (e.g. <code>arr.map(...).map(...)</code>).</p>\n<p>In many cases, you can instead use [<code>Iterator::map</code>] by calling <code>.iter()</code>\nor <code>.into_iter()</code> on your array. <code>[T; N]::map</code> is only necessary if you\nreally need a new array of the same size as the result. Rust’s lazy\niterators tend to get optimized very well.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>y = x.map(|v| v + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(y, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">let </span>x = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>temp = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span>y = x.map(|v| { temp += <span class=\"number\">1</span>; v * temp });\n<span class=\"macro\">assert_eq!</span>(y, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]);\n\n<span class=\"kw\">let </span>x = [<span class=\"string\">\"Ferris\"</span>, <span class=\"string\">\"Bueller's\"</span>, <span class=\"string\">\"Day\"</span>, <span class=\"string\">\"Off\"</span>];\n<span class=\"kw\">let </span>y = x.map(|v| v.len());\n<span class=\"macro\">assert_eq!</span>(y, [<span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_map</a>&lt;F, R&gt;(\n    self,\n    f: F\n) -&gt; &lt;&lt;R as Try&gt;::Residual as Residual&lt;[&lt;R as Try&gt;::Output; N]&gt;&gt;::TryType<div class=\"where\">where\n    F: FnMut(T) -&gt; R,\n    R: Try,\n    &lt;R as Try&gt;::Residual: Residual&lt;[&lt;R as Try&gt;::Output; N]&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_try_map</code>)</span></div></span></summary><div class=\"docblock\"><p>A fallible function <code>f</code> applied to each element on array <code>self</code> in order to\nreturn an array the same size as <code>self</code> or the first error encountered.</p>\n<p>The return type of this function depends on the return type of the closure.\nIf you return <code>Result&lt;T, E&gt;</code> from the closure, you’ll get a <code>Result&lt;[T; N], E&gt;</code>.\nIf you return <code>Option&lt;T&gt;</code> from the closure, you’ll get an <code>Option&lt;[T; N]&gt;</code>.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_try_map)]\n</span><span class=\"kw\">let </span>a = [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>];\n<span class=\"kw\">let </span>b = a.try_map(|v| v.parse::&lt;u32&gt;()).unwrap().map(|v| v + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(b, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"kw\">let </span>a = [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2a\"</span>, <span class=\"string\">\"3\"</span>];\n<span class=\"kw\">let </span>b = a.try_map(|v| v.parse::&lt;u32&gt;());\n<span class=\"macro\">assert!</span>(b.is_err());\n\n<span class=\"kw\">use </span>std::num::NonZeroU32;\n<span class=\"kw\">let </span>z = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"macro\">assert_eq!</span>(z.try_map(NonZeroU32::new), <span class=\"prelude-val\">None</span>);\n<span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>b = a.try_map(NonZeroU32::new);\n<span class=\"kw\">let </span>c = b.map(|x| x.map(NonZeroU32::get));\n<span class=\"macro\">assert_eq!</span>(c, <span class=\"prelude-val\">Some</span>(a));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.57.0, const since 1.57.0\">1.57.0 (const: 1.57.0)</span><h4 class=\"code-header\">pub const fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[T]</h4></section></summary><div class=\"docblock\"><p>Returns a slice containing the entire array. Equivalent to <code>&amp;s[..]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"since rightside\" title=\"Stable since Rust version 1.57.0\">1.57.0</span><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut [T]</h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice containing the entire array. Equivalent to\n<code>&amp;mut s[..]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.each_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">each_ref</a>(&amp;self) -&gt; [&amp;T; N]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Borrows each element and returns an array of references with the same\nsize as <code>self</code>.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_methods)]\n\n</span><span class=\"kw\">let </span>floats = [<span class=\"number\">3.1</span>, <span class=\"number\">2.7</span>, -<span class=\"number\">1.0</span>];\n<span class=\"kw\">let </span>float_refs: [<span class=\"kw-2\">&amp;</span>f64; <span class=\"number\">3</span>] = floats.each_ref();\n<span class=\"macro\">assert_eq!</span>(float_refs, [<span class=\"kw-2\">&amp;</span><span class=\"number\">3.1</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">2.7</span>, <span class=\"kw-2\">&amp;</span>-<span class=\"number\">1.0</span>]);</code></pre></div>\n<p>This method is particularly useful if combined with other methods, like\n<a href=\"#method.map\"><code>map</code></a>. This way, you can avoid moving the original\narray if its elements are not [<code>Copy</code>].</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_methods)]\n\n</span><span class=\"kw\">let </span>strings = [<span class=\"string\">\"Ferris\"</span>.to_string(), <span class=\"string\">\"♥\"</span>.to_string(), <span class=\"string\">\"Rust\"</span>.to_string()];\n<span class=\"kw\">let </span>is_ascii = strings.each_ref().map(|s| s.is_ascii());\n<span class=\"macro\">assert_eq!</span>(is_ascii, [<span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n\n<span class=\"comment\">// We can still access the original array: it has not been moved.\n</span><span class=\"macro\">assert_eq!</span>(strings.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.each_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">each_mut</a>(&amp;mut self) -&gt; [&amp;mut T; N]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Borrows each element mutably and returns an array of mutable references\nwith the same size as <code>self</code>.</p>\n<h5 id=\"example-1\"><a href=\"#example-1\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_methods)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>floats = [<span class=\"number\">3.1</span>, <span class=\"number\">2.7</span>, -<span class=\"number\">1.0</span>];\n<span class=\"kw\">let </span>float_refs: [<span class=\"kw-2\">&amp;mut </span>f64; <span class=\"number\">3</span>] = floats.each_mut();\n<span class=\"kw-2\">*</span>float_refs[<span class=\"number\">0</span>] = <span class=\"number\">0.0</span>;\n<span class=\"macro\">assert_eq!</span>(float_refs, [<span class=\"kw-2\">&amp;mut </span><span class=\"number\">0.0</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"number\">2.7</span>, <span class=\"kw-2\">&amp;mut </span>-<span class=\"number\">1.0</span>]);\n<span class=\"macro\">assert_eq!</span>(floats, [<span class=\"number\">0.0</span>, <span class=\"number\">2.7</span>, -<span class=\"number\">1.0</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_array_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">split_array_ref</a>&lt;const M: usize&gt;(&amp;self) -&gt; (&amp;[T; M], &amp;[T])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>split_array</code>)</span></div></span></summary><div class=\"docblock\"><p>Divides one array reference into two at an index.</p>\n<p>The first will contain all indices from <code>[0, M)</code> (excluding\nthe index <code>M</code> itself) and the second will contain all\nindices from <code>[M, N)</code> (excluding the index <code>N</code> itself).</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>Panics if <code>M &gt; N</code>.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(split_array)]\n\n</span><span class=\"kw\">let </span>v = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\n{\n   <span class=\"kw\">let </span>(left, right) = v.split_array_ref::&lt;<span class=\"number\">0</span>&gt;();\n   <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[]);\n   <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.split_array_ref::&lt;<span class=\"number\">2</span>&gt;();\n    <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.split_array_ref::&lt;<span class=\"number\">6</span>&gt;();\n    <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[]);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_array_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">split_array_mut</a>&lt;const M: usize&gt;(&amp;mut self) -&gt; (&amp;mut [T; M], &amp;mut [T])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>split_array</code>)</span></div></span></summary><div class=\"docblock\"><p>Divides one mutable array reference into two at an index.</p>\n<p>The first will contain all indices from <code>[0, M)</code> (excluding\nthe index <code>M</code> itself) and the second will contain all\nindices from <code>[M, N)</code> (excluding the index <code>N</code> itself).</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>Panics if <code>M &gt; N</code>.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(split_array)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>(left, right) = v.split_array_mut::&lt;<span class=\"number\">2</span>&gt;();\n<span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>][..]);\n<span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\nleft[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;\nright[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplit_array_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rsplit_array_ref</a>&lt;const M: usize&gt;(&amp;self) -&gt; (&amp;[T], &amp;[T; M])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>split_array</code>)</span></div></span></summary><div class=\"docblock\"><p>Divides one array reference into two at an index from the end.</p>\n<p>The first will contain all indices from <code>[0, N - M)</code> (excluding\nthe index <code>N - M</code> itself) and the second will contain all\nindices from <code>[N - M, N)</code> (excluding the index <code>N</code> itself).</p>\n<h5 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h5>\n<p>Panics if <code>M &gt; N</code>.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(split_array)]\n\n</span><span class=\"kw\">let </span>v = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\n{\n   <span class=\"kw\">let </span>(left, right) = v.rsplit_array_ref::&lt;<span class=\"number\">0</span>&gt;();\n   <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n   <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.rsplit_array_ref::&lt;<span class=\"number\">2</span>&gt;();\n    <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.rsplit_array_ref::&lt;<span class=\"number\">6</span>&gt;();\n    <span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;</span>[]);\n    <span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rsplit_array_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rsplit_array_mut</a>&lt;const M: usize&gt;(&amp;mut self) -&gt; (&amp;mut [T], &amp;mut [T; M])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>split_array</code>)</span></div></span></summary><div class=\"docblock\"><p>Divides one mutable array reference into two at an index from the end.</p>\n<p>The first will contain all indices from <code>[0, N - M)</code> (excluding\nthe index <code>N - M</code> itself) and the second will contain all\nindices from <code>[N - M, N)</code> (excluding the index <code>N</code> itself).</p>\n<h5 id=\"panics-3\"><a href=\"#panics-3\">Panics</a></h5>\n<p>Panics if <code>M &gt; N</code>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(split_array)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>(left, right) = v.rsplit_array_mut::&lt;<span class=\"number\">4</span>&gt;();\n<span class=\"macro\">assert_eq!</span>(left, <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n<span class=\"macro\">assert_eq!</span>(right, <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>][..]);\nleft[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;\nright[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre></div>\n</div></details></div></details>",0,"esp_hal::twai::filter::BitFilter"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CDigest%3E-for-%5Bu8;+16%5D\" class=\"impl\"><a class=\"src rightside\" href=\"src/esp_hal/rom/md5.rs.html#206-211\">source</a><a href=\"#impl-From%3CDigest%3E-for-%5Bu8;+16%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl From&lt;<a class=\"struct\" href=\"esp_hal/rom/md5/struct.Digest.html\" title=\"struct esp_hal::rom::md5::Digest\">Digest</a>&gt; for [u8; 16]</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/esp_hal/rom/md5.rs.html#208-210\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from</a>(digest: <a class=\"struct\" href=\"esp_hal/rom/md5/struct.Digest.html\" title=\"struct esp_hal::rom::md5::Digest\">Digest</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Digest>","esp_hal::twai::filter::BitFilter"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()